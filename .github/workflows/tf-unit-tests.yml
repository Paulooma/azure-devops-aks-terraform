name: 'Terraform Unit Tests'

on:
  push:

  workflow_dispatch:
    inputs:
        tfvars_file:
          type: choice
          description: 'Path to the .tfvars file'
          options:
          - dev
          - prod
          required: true
          default: 'dev'
        action:
          type: choice
          description: 'Apply or Destroy'
          options:
          - plan
          - apply
          - destroy
          required: true
          default: 'apply'

permissions:
  security-events: write # Needed to upload-sarif
  contents: read # Needed to clone repo
  actions: read # Potentially needed for private repositories (see https://github.com/github/codeql-action/issues/2117)

jobs:
  terraform-unit-tests:
    name: 'Terraform Unit Tests'
    runs-on: ubuntu-latest
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    
    # Export the Azure Login Credentials to the Github environment
    - name: Export Azure Login Credentials
      run: |
       echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
       echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
       echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
       echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.   
    - name: Terraform Init
      working-directory: "environments/dev"
      run: terraform init

    # Validate terraform files
    - name: Terraform Validate
      working-directory: "environments/dev"
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      working-directory: "environments/dev"
      run: terraform fmt -check -recursive
    
    # Perform a security scan of the terraform code using checkov
    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with: 
        framework: terraform

    # Upload results to GitHub Advanced Security
    - name: Upload SARIF file
      if: success() || failure()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
        category: checkov